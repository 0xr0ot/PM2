{"name":"Pm2","tagline":"Modern CLI process manager for Node apps with a builtin load-balancer","body":"# ![Monit](https://github.com/unitech/pm2/raw/master/pres/top-logo-wo.png)\r\n\r\npm2 is a process manager for Node apps with a builtin load-balancer.\r\n\r\n# Main features\r\n\r\n- Script daemonization\r\n- 0s downtime reload\r\n- Builtin load-balancer\r\n- Startup scripts for Ubuntu and CentOS\r\n- Stop unstable process (avoid infinite loop)\r\n- Monitoring in console\r\n- HTTP API\r\n- [Remote control and real time interface API](https://github.com/Unitech/pm2-interface)\r\n\r\nTested with Node v0.11, v0.10, v0.8 (https://travis-ci.org/Unitech/pm2).\r\nCompatible CoffeeScript.\r\nWorks on Linux & MacOS.\r\n\r\n[![Build Status](https://travis-ci.org/Unitech/pm2.png)](https://travis-ci.org/Unitech/pm2)\r\n[![Build Status](https://david-dm.org/Unitech/pm2.png)](https://david-dm.org/Unitech/pm2)\r\n[![NPM version](https://badge.fury.io/js/pm2.png)](http://badge.fury.io/js/pm2)\r\n\r\n[![NPM](https://nodei.co/npm/pm2.png?downloads=true)](https://nodei.co/npm/pm2.png?downloads=true)\r\n\r\n# Doc\r\n\r\n- 0.5.x documentation : [0.5.x](https://github.com/Unitech/pm2/blob/0f0f4261ab21560d54bf39503ff01d4278096240/README.md)\r\n\r\n\r\n# Readme Contents\r\n\r\n- [Installation](#a1)\r\n- [Usage/Features](#a2)\r\n- [Different ways to launch a process](#a3)\r\n- [0s downtime reload](#a16)\r\n- [CoffeeScript](#a19)\r\n- [Is my production server ready for PM2](#a4)\r\n- [Listing processes : pm2 list](#a6)\r\n- [Monitoring processes (CPU/RAM) : pm2 monit](#a7)\r\n- [Startup script generation : pm2 startup](#a8)\r\n- [Log aggregation : pm2 logs](#a9)\r\n- [Fork mode](#a23)\r\n- [Customization](#a24)\r\n- [API health end point : pm2 web](#a12)\r\n- [JSON processes declaration](#a13)\r\n- [Contributing/Development mode](#a27)\r\n- [Known bugs](#a21)\r\n- [Launching the tests](#a4)\r\n- [They talk about it](#a20)\r\n- [License](#a15)\r\n\r\n<a name=\"a1\"/>\r\n# Installation\r\n\r\n```bash\r\nnpm install -g pm2\r\n```\r\n\r\n<a name=\"a2\"/>\r\n# Usage/Features\r\n\r\n```bash\r\n$ npm install pm2 -g     # Install pm2 command line globally\r\n$ pm2 start app.js -i 4  # Daemonize pm2 and Start 4 clustered instances of app.js\r\n                         # You can also pass the 'max' params to start \r\n                         # the right numbers of processes depending of CPUs\r\n\r\n$ pm2 start app.js --name my-api # Name process\r\n\r\n$ pm2 list               # Display all processes status\r\n$ pm2 monit              # Monitor all processes\r\n$ pm2 logs               # Display all processes logs in streaming\r\n\r\n$ pm2 stop all           # Stop all processes\r\n$ pm2 restart all        # Restart all processes\r\n\r\n$ pm2 reload all         # Will 0s downtime reload (for NETWORKED processes)\r\n\r\n$ pm2 stop 0             # Stop specific process id\r\n$ pm2 restart 0          # Restart specific process id\r\n\r\n$ pm2 startup            # Generate init script to keep processes alive\r\n\r\n$ pm2 web                # Launch Health computer API endpoint (http://localhost:9615)\r\n\r\n$ pm2 delete 0           # Will remove process from pm2 list\r\n$ pm2 delete all         # Will remove all processes from pm2 list\r\n```\r\n\r\n<a name=\"a3\"/>\r\n## Different ways to launch a process\r\n\r\n```bash\r\n$ pm2 start app.js -i max  # Will start maximum processes depending on CPU availables\r\n\r\n$ pm2 start app.js -i 3    # Will start 3 processes\r\n\r\n$ pm2 start app.js -x            # Start app.js in fork mode instead of cluster\r\n$ pm2 start app.js -x -- -a 23   # Start app.js in fork mode and pass arguments (-a 23)\r\n\r\n$ pm2 start app.js --name serverone # Start a process an name it as server one\r\n                                    # you can now stop the process by doing\r\n                                    # pm2 stop serverone\r\n                                    \r\n$ pm2 start app.json                # Start processes with options declared in app.json\r\n                                    # Go to chapter Multi process JSON declaration for more\r\n                           \r\n$ pm2 start app.js -i max -- -a 23  # Pass arguments after -- to app.js\r\n\r\n$ pm2 start app.js -i max -e err.log -o out.log  # Will start and generate a configuration file\r\n```\r\n\r\nYou can also execute app in other languages ([the fork mode](#a23)):\r\n```bash\r\n$ pm2 start my-bash-script.sh -x --interpreter bash\r\n\r\n$ pm2 start my-python-script.py -x --interpreter python\r\n```\r\n\r\n<a name=\"a16\"/>\r\n## 0s downtime reload\r\n\r\nThis feature permits to reload code without loosing queries connection.\r\n\r\nWarning :\r\n- Only for networked app\r\n- Running on Node 0.11.x\r\n- In cluster mode (default mode)\r\n\r\n```bash\r\n$ pm2 reload all\r\n```\r\n\r\nThanks to TruongSinh Tran-Nguyen https://github.com/truongsinh\r\n\r\n<a name=\"a19\"/>\r\n## CoffeeScript\r\n\r\n```bash\r\n$ pm2 start my_app.coffee\r\n```\r\n\r\nThat's all !\r\n\r\n<a name=\"a23\"/>\r\n## Fork mode - execute script in different languages\r\n\r\nThe default mode of PM2 consists of wrapping the code of your node app into the Node Cluster module. It's called the **cluster mode**.\r\nThere is also a more classical way to execute your app, like node-forever do, called the **fork mode**.\r\n\r\nIn fork mode all options are the same than the cluster mode (restart, delete...). \r\nBut, by the way, you can't cluster natively in fork mode as cluster do (can't use the -i option).\r\n\r\nHere is how to start your app in fork : \r\n\r\n```bash\r\n$ pm2 start app.js -x   # Will start your app.js in fork mode\r\n$ pm2 list              # You will see that on the row \"mode\" it's written \"fork\"\r\n```\r\n\r\nYou can also exec scripts in other languages :\r\n\r\n```bash\r\n$ pm2 start my-bash-script.sh -x --interpreter bash\r\n\r\n$ pm2 start my-python-script.py -x --interpreter python\r\n```\r\n\r\n<a name=\"a4\"/>\r\n## Is my production server ready for PM2 ?\r\n\r\nJust try the tests before using PM2 on your production server\r\n\r\n```bash\r\n$ git clone https://github.com/Unitech/pm2.git\r\n$ cd pm2\r\n$ npm install  # Or do npm install --dev if devDependencies are not installed\r\n$ npm test\r\n```\r\n\r\nIf a test is broken please report us issues [here](https://github.com/Unitech/pm2/issues?state=open)\r\n\r\n<a name=\"a6\"/>\r\n## pm2 list\r\n\r\nList infos about all processes managed by pm2. It shows also how many times a process has been restarted because of an unhandled exception.\r\n\r\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-list.png)\r\n\r\n<a name=\"a7\"/>\r\n## pm2 monit\r\n\r\nMonitor CPU and memory usage of every node process (and also clustered processes) managed by pm2.\r\n\r\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-monit.png)\r\n\r\n<a name=\"a8\"/>\r\n## pm2 automatic startup script generation\r\n\r\nPM2 provides an automatic way to keep Node processes alive. \r\nIt uses a System V init script compatible Ubuntu and CentOS.\r\n\r\n```bash\r\n$ pm2 startup  # then follow the command instruction\r\n```\r\n\r\nNow you can reboot your server, and already launched processes should be kepts alive.\r\n\r\n<a name=\"a9\"/>\r\n## pm2 logs\r\n\r\nDisplay logs in streaming of all processes, without having to do a tail -f or something else.\r\nYou can also pass [name|id] as parameter to stream only the log of a specified process.\r\n\r\n![Monit](https://github.com/unitech/pm2/raw/master/pres/pm2-logs.png)\r\n\r\n<a name=\"a12\"/>\r\n## pm2 health web api endpoint\r\n\r\nPM2 can disserve an API endpoint to monitor processes and computer health (cpu usage, memory, network interfaces...)\r\n\r\n```\r\npm2 web\r\n```\r\n\r\n<a name=\"a24\"/>\r\n## Customization\r\n\r\nMultiple variables can be customized via the environment :\r\n\r\n```\r\n  DAEMON_BIND_HOST   : process.env.PM2_BIND_ADDR || 'localhost',\r\n  DAEMON_RPC_PORT    : process.env.PM2_RPC_PORT  || 6666, // RPC commands\r\n  DAEMON_PUB_PORT    : process.env.PM2_PUB_PORT  || 6667, // Realtime events\r\n  DEBUG              : process.env.PM2_DEBUG || false,\r\n  WEB_INTERFACE      : process.env.PM2_API_PORT  || 9615,\r\n```\r\n\r\n<a name=\"a13\"/>\r\n# Multi process JSON declaration\r\n\r\nprocesses.json : \r\n\r\n```json\r\n[{\r\n  \"name\"      : \"echo\",\r\n  \"script\"    : \"./examples/args.js\",\r\n  \"args\"      : \"['--toto=heya coco', '-d', '1']\",\r\n  \"exec_mode\" : \"fork_mode\"\r\n},{\r\n    \"name\"       : \"api\",\r\n    \"script\"     : \"./examples/child.js\",\r\n    \"instances\"  : \"4\",\r\n    \"error_file\" : \"./examples/child-err.log\",\r\n    \"out_file\"   : \"./examples/child-out.log\",\r\n    \"exec_mode\"  : \"cluster_mode\",\r\n    \"port\"       : 9005\r\n},{\r\n  \"min_uptime\" : \"100\",\r\n  \"max_restarts\" : \"400\",\r\n  \"name\" : \"auto-kill\",\r\n  \"script\" : \"./examples/killfast.js\"\r\n}]\r\n```\r\n\r\nThen with the cli :\r\n```bash\r\n$ pm2 start processes.json\r\n```\r\n\r\n### Special options with JSON process declaration\r\n\r\n- \"min_uptime\":\r\nif a process is restarted with an uptime smaller than this value,\r\nthis restart counts as an unstable restart. If this option is not specified,\r\nall restarts are considered unstable.\r\n\r\n- \"max_restarts\":\r\nif the number of unstable restarts exceeds this number,\r\nthe process will be stopped and a message with number with restarts will be logged.\r\n\r\n\r\n<a name=\"a27\"/>\r\n# Contributing/Development mode\r\n\r\nFork PM2 and to hack it it's pretty simple :\r\n\r\n```\r\n$ pm2 kill   # kill the current pm2\r\n$ git clone my_pm2_fork.git\r\n$ cd pm2/\r\n$ DEBUG=* PM2_DEBUG=true./bin/pm2 start xxx.js\r\n```\r\n\r\nEverytime you do a modification on the code you have to restart pm2, so just do a `./bin/pm2 kill` before\r\nstarting an app or something else.\r\nYou have to restart it because the code is daemonized on the memory.\r\n\r\n<a name=\"a21\"/>\r\n# Known bugs and workarounds\r\n\r\nFirst, install the lastest pm2 version :\r\n\r\n```bash\r\n$ npm install -g pm2@latest\r\n```\r\n\r\n- Node 0.10.x doesn't free script port when stopped. It's due to the NodeJS cluster module.\r\nSo in order to manage your process with PM2 without problem, you have to use the [fork mode](#a23) instead.\r\n\r\n```\r\n$ pm2 start index.js -x  # start my app in fork mode\r\n```\r\n\r\nFor more informations about this issue : [#74](https://github.com/Unitech/pm2/issues/74)\r\n\r\n- `Cannot read property 'getsockname' of undefined`\r\n\r\nWhen using the cluster mode (by default) you can't use ports from 0 to 1024. If you really need to exec in this range use the [fork mode](#a23) with the `-x` parameter.\r\n\r\n<a name=\"a14\"/>\r\n# Test\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\n<a name=\"a20\"/>\r\n# They talk about it\r\n\r\n- http://devo.ps/blog/2013/06/26/goodbye-node-forever-hello-pm2.html\r\n- https://coderwall.com/p/igdqyw\r\n- http://revdancatt.com/2013/09/17/node-day-1-getting-the-server-installing-node-and-pm2/\r\n- https://medium.com/tech-talk/e7c0b0e5ce3c\r\n\r\n# MISC\r\n\r\n## Code structure\r\n\r\n![Monit](https://github.com/unitech/pm2/raw/master/pres/Drawing1.png)\r\n\r\n## Features\r\n\r\n- Clusterize your Node networked script without adding one line of code\r\n- Fully tested\r\n- Monitor process/cluster processes health (status, memory, cpu usage, restarted time) via CLI (htop like)\r\n- Monitor server health (processes, cpu core...) via JSON api (pm2 web)\r\n- Launch multiple applications via JSON\r\n- Forever keep alive processes\r\n- Log streaming in realtime (pm2 logs)\r\n- Log uncaught exceptions in error logs\r\n- Track restarted time\r\n- Auto stop processes who exit too fast\r\n- Dump current processes and resurrect (upstart)\r\n\r\n## Idea bucket\r\n\r\n- Remote administration/status checking\r\n- Builtin Inter process communication channel (message bus)\r\n- Auto start of the script at start (upstart)\r\n- V8 GC memory leak detection\r\n- Web interface\r\n- Keeping monitoring data\r\n- Integrated wrk utils endpoint benchmark\r\n- Add homogen communication channel (pubsub/eventemitter2 - wildcard events) (axon pub/sub-message.js)\r\n\r\n## Sponsors\r\n\r\nThanks to [Devo.ps](http://devo.ps/) and [Wiredcraft](http://wiredcraft.com/) for their knowledge and expertise.\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Unitech/pm2/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n<a name=\"a15\"/>\r\n# License - Apache License v2\r\n\r\nCopyright [2013] [Strzelewicz Alexandre <as@unitech.io>]\r\n  \r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n           \r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n                  \r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.","google":"UA-45248078-1","note":"Don't delete this file! It's used internally to help with page regeneration."}